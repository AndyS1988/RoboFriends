{"ast":null,"code":"// importing constant variables:\nimport { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants.js'; // declaring initial state for searchRobots reducer:\n\nvar initialState = {\n  searchField: '' // declaring reducer searchRobots that receives two params which have declared default values \n\n};\nexport var searchRobots = function searchRobots() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  // using a switch method that listens to actions:\n  switch (action.type) {\n    // in case the action.type is equal to CHANGE_SEARCH_FIELD then return \n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, {\n        searchField: action.payload\n      });\n\n    default:\n      return state;\n  }\n}; // declaring reducer requestRobots that receives two params which have declared default values \n\nexport var requestRobots = function requestRobots() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  //using a switch method that listens to actions:\n  switch (action.type) {\n    //in case action.type is equal to REQUEST_ROBOTS_PENDING then return:\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, {\n        isPending: true\n      });\n    //in case action.type is equal to REQUEST_ROBOTS_SUCCESS then return:\n\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {\n        robots: action.payload,\n        isPending: false\n      });\n    //in case action.type is equal to REQUEST_ROBOTS_FAILED then return:\n\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {\n        error: action.payload,\n        isPending: false\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:\\Users\\andre_000\\Desktop\\robofriends\\src\\reducers.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","initialState","searchField","searchRobots","state","action","type","Object","assign","payload","requestRobots","isPending","robots","error"],"mappings":"AAAA;AACA,SACCA,mBADD,EAECC,sBAFD,EAGCC,sBAHD,EAICC,qBAJD,QAKQ,gBALR,C,CAOA;;AACA,IAAMC,YAAY,GAAG;AACpBC,EAAAA,WAAW,EAAE,EADO,CAIrB;;AAJqB,CAArB;AAKA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAoC;AAAA,MAAnCC,KAAmC,uEAA7BH,YAA6B;AAAA,MAAfI,MAAe,uEAAP,EAAO;;AAC/D;AACA,UAAOA,MAAM,CAACC,IAAd;AACC;AACA,SAAKT,mBAAL;AACC,aAAOU,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAACF,QAAAA,WAAW,EAAEG,MAAM,CAACI;AAArB,OAAzB,CAAP;;AACD;AACC,aAAOL,KAAP;AALF;AAOA,CATM,C,CAWP;;AACA,OAAO,IAAMM,aAAa,GAAG,SAAhBA,aAAgB,GAAmC;AAAA,MAAlCN,KAAkC,uEAA5BH,YAA4B;AAAA,MAAdI,MAAc,uEAAP,EAAO;;AAC/D;AACA,UAAOA,MAAM,CAACC,IAAd;AACC;AACA,SAAKR,sBAAL;AACC,aAAOS,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAACO,QAAAA,SAAS,EAAE;AAAZ,OAAzB,CAAP;AACD;;AACA,SAAKZ,sBAAL;AACC,aAAOQ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAACQ,QAAAA,MAAM,EAAEP,MAAM,CAACI,OAAhB;AAAyBE,QAAAA,SAAS,EAAE;AAApC,OAAzB,CAAP;AACD;;AACA,SAAKX,qBAAL;AACC,aAAOO,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAACS,QAAAA,KAAK,EAAER,MAAM,CAACI,OAAf;AAAwBE,QAAAA,SAAS,EAAE;AAAnC,OAAzB,CAAP;;AACD;AACC,aAAOP,KAAP;AAXF;AAaA,CAfM","sourcesContent":["// importing constant variables:\r\nimport { \r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n\t} from './constants.js'\r\n\r\n// declaring initial state for searchRobots reducer:\r\nconst initialState = {\r\n\tsearchField: ''\r\n}\r\n\r\n// declaring reducer searchRobots that receives two params which have declared default values \r\nexport const searchRobots = (state=initialState, action ={}) => {\r\n\t// using a switch method that listens to actions:\r\n\tswitch(action.type) {\r\n\t\t// in case the action.type is equal to CHANGE_SEARCH_FIELD then return \r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({}, state, {searchField: action.payload});\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\n// declaring reducer requestRobots that receives two params which have declared default values \r\nexport const requestRobots = (state=initialState, action={}) => {\r\n\t//using a switch method that listens to actions:\r\n\tswitch(action.type) {\r\n\t\t//in case action.type is equal to REQUEST_ROBOTS_PENDING then return:\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({}, state, {isPending: true});\r\n\t\t//in case action.type is equal to REQUEST_ROBOTS_SUCCESS then return:\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, {robots: action.payload, isPending: false});\r\n\t\t//in case action.type is equal to REQUEST_ROBOTS_FAILED then return:\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({}, state, {error: action.payload, isPending: false});\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}